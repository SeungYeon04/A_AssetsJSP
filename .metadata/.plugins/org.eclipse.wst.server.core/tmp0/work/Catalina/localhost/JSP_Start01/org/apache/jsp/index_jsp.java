/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.39
 * Generated at: 2025-03-11 05:35:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<header>† ♤ ♧  나의 작은 게임 팩 쇼핑몰 £ ¢</header>\r\n");
      out.write("\r\n");
      out.write("    <nav>\r\n");
      out.write("        <a href=\"#\">홈</a>\r\n");
      out.write("        <a href=\"#\">상품</a>\r\n");
      out.write("        <a href=\"#\">장바구니</a>\r\n");
      out.write("        <a href=\"#\">문의하기</a>\r\n");
      out.write("    </nav>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <div class=\"product\">\r\n");
      out.write("            <img src=\"https://via.placeholder.com/200\" alt=\"상품1\">\r\n");
      out.write("            <h3>상품명 1</h3>\r\n");
      out.write("            <p>₩10,000</p>\r\n");
      out.write("            <button>장바구니 담기</button>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"product\">\r\n");
      out.write("            <img src=\"https://via.placeholder.com/200\" alt=\"상품2\">\r\n");
      out.write("            <h3>상품명 2</h3>\r\n");
      out.write("            <p>₩15,000</p>\r\n");
      out.write("            <button>장바구니 담기</button>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"product\">\r\n");
      out.write("            <img src=\"https://via.placeholder.com/200\" alt=\"상품3\">\r\n");
      out.write("            <h3>상품명 3</h3>\r\n");
      out.write("            <p>₩20,000</p>\r\n");
      out.write("            <button>장바구니 담기</button>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <footer>© 2025 내 쇼핑몰. All rights reserved.</footer>\r\n");
      out.write("    <style>\r\n");
      out.write("    	\r\n");
      out.write("    	body {\r\n");
      out.write("    		font-family: 'Ownglyph_ParkDaHyun';\r\n");
      out.write("    	}\r\n");
      out.write("    	\r\n");
      out.write("    	header {\r\n");
      out.write("    		text-align: center; \r\n");
      out.write("    		padding: 15px 0; \r\n");
      out.write("    	}\r\n");
      out.write("    	\r\n");
      out.write("    	\r\n");
      out.write("    	\r\n");
      out.write("	    @font-face {\r\n");
      out.write("		    font-family: 'Ownglyph_ParkDaHyun';\r\n");
      out.write("		    src: url('https://fastly.jsdelivr.net/gh/projectnoonnu/2411-3@1.0/Ownglyph_ParkDaHyun.woff2') format('woff2');\r\n");
      out.write("		    font-weight: normal;\r\n");
      out.write("		    font-style: normal;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		nav {\r\n");
      out.write("			background-color: #444; \r\n");
      out.write("			padding: 10px; \r\n");
      out.write("			text-align: ceter; \r\n");
      out.write("			\r\n");
      out.write("			a {\r\n");
      out.write("				color: white;\r\n");
      out.write("            	text-decoration: none;\r\n");
      out.write("            	margin: 0 8px;\r\n");
      out.write("            	/*font-size: 18px;*/\r\n");
      out.write("			 }	\r\n");
      out.write("			 \r\n");
      out.write("			a:hover {\r\n");
      out.write("            	text-decoration: underline;\r\n");
      out.write("        	}\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		/* 메인콘텐츠 */\r\n");
      out.write("\r\n");
      out.write("		.container {\r\n");
      out.write("			width: 80%; \r\n");
      out.write("			margin: 20px auto; \r\n");
      out.write("			display: flex; \r\n");
      out.write("			flex-wrap: wrap; \r\n");
      out.write("			jusify-content:	space-between; \r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("    </style>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
